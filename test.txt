classe item {
  int letra;
  int anterior;
  int valor;
  int contador;
  int code;
}

entrada: string mainstring, string substring, inteiro m tamanho da mainstring, inteiro n tamanho da substring.
saída: inteiro positivo representando a qunatidade de vezes que a substring apareceu como subsequencia da mainstring 
count(mainstring, substring, m, n) {  
  variável dicionário = novo dicionário<inteiro, item>
  variável anterior = null
  dicionário[-1] = item com {code = -1, valor = 1} 
  for(int i = 0; i < n; i++) {
    variável index = substring[i]
    se index for uma chave existente no dicionário {
      variável contador = dicionário[index].contador
      dicionário[index].contador = contador + 1
      index = index + contador * 256
    }
    variável item
    se i == 0 {
      item = item com {letra = substring[i], code = index, valor = 0, contador = 1, anterior = -1}
    } caso contrário {
      item = item com {letra = substring[i], code = index, valor = 0, contador = 1, anterior = anterior.code}
    }
    anterior = item
    dicionário[index] = item
  }

  for(int i = 0; i < m; i++) {
    variável valorAnterior = 0;
    para todos os itens do dicionário com letra igual mainstring[i] {
      variável novoValor = item.valor;
      se item.letra == dicionário[item.anterior].letra {
        item.valor = item.valor + valorAnterior;
      } caso contrário {
        item.valor = item.valor + dicionário[item.anterior].valor;
      }
      valorAnterior = novoValor;
    }
  }

  retorna anterior.valor
}


int count(string main, string sub, int m, int n){
  dicionário = novo dicionário chave int e valor Item
  previous = null
 
  substringMap[-1] = novo Item com letra igual a -1 anterior igual a -2 e valor igual a 1
 
  for (int i = 0; i < sub.length; i++) {
    if (i == 0) {
      previous = novo Item com a letra igual a sub na posição i e anterior igual a -1
      substringMap[sub[i]] = previous
      continue
    }
 
    se a letra anterior for igual a atual {
 	    incrementa o contador de repetição do anterior e recalcula o fatorial
      continue
    }
 
    index = sub[i]
    enquanto a index existir no dicionário seu valor é incrementado em 256
 
    previous = novo Item com letra igual a index e anterior igual a previous.letra
    substringMap[index] = previous
  }
 
  for (int i = 0; i < main.length; i++) {
    se main na posição i nao existir no dicionário o loop pula para a proxima iteração
 
    int index = main[i];
    enquanto a index existir no dicionário {
      Item current = substringMap[index]
      Item prev = substringMap[current.anterior]
      index += 256

      se a repetição de current for 1 o valor é incrementado em 1 e o laço pula para a próxima iteração
      if (prev.getValue() <= 0) {
        continue;
      }
 
      se i for 0 ou a letra anterior for igual a letra de current {
        novoValor = novo RepeatedValue com valorAnterior = prev.getValue() e n = 0
        o valorAnterior do novoValor é subtraído por todos os valores do vetor valores de current e 
        novoValor é adicionado ao vetor;
      }
 
      para cada valor item em current.values {
        o n do item é incrementado por 1 e o valor do item vai ser igual ao valorAnterior
        multiplicado pela da combinação de n e da repetição
      }
    }
  }
para cada caractere da mainstring se ele existir no dicionário:
  se o item do dicionário nao tiver repetição ele é incrementado em 1 e pula para a proxima iteração.
  
  return previous.getValue();
}


async function findSub(main: string, sub: string) {
  let subMap: Map<number, item> = new Map();
  let previous = null;
  let rrr: number[] = [];
  subMap.set(-1, new item(-1, -2, 1));
  for (var i = 0; i < sub.length; i++) {
    let charCodeAt: number = sub.charCodeAt(i);
    if (i == 0) {
      previous = new item(charCodeAt, -1);
      previous.code = charCodeAt;
      subMap.set(charCodeAt, previous);
      continue;
    }

    if (previous!.code == charCodeAt) {
      previous!.repeated++;
      if (previous!.repeated == 2) {
        rrr.push(previous!.letter);
      }
      continue;
    }

    let index: number = charCodeAt;
    let last = subMap.get(index);
    if (last != undefined) {
      index = index + last!.count * 256;
      last!.count++;
    }

    previous = new item(index, previous!.letter);
    previous.code = charCodeAt;
    subMap.set(index, previous);
  }

  for (let i = 0; i < rrr.length; i++) {
    let item = subMap.get(rrr[i])!;
    item.fat = calcLowerRepeated(item.repeated);
  }

  for (let i = 0; i < main.length; i++) {
    var index = main.charCodeAt(i);
    let current = subMap.get(index);
    if (current == undefined) {
      continue;
    }
    let initial = current.count;
    for (let k = 0; k < initial; k++) {
      let current = subMap.get(index)!;
      let prev = subMap.get(current.prev)!;

      index += 256;
      if (current.repeated == 1) {
        current.value += prev.getValue();
        continue;
      }
      if (prev.getValue() <= 0) continue;
      if (i == 0 || main.charCodeAt(i - 1) != current.code) {
        let value = new repeatedValue();

        value.n = 0;
        value.backValue = prev.getValue();
        for (let m = 0; m < current.values.length; m++) {
          value.backValue -= current.values[m].backValue;
        }
        current.values.push(value);
      }

      for (let i = 0; i < current.values.length; i++) {
        current.values[i].n++;
        current.values[i].value =
          (calcUpperRepeated(current.values[i].n, current.repeated) /
            current.fat) *
          current.values[i].backValue;
      }
    }
  }
  return previous!.getValue();
}

async function count(a: any, b: any, m: any, n: any): Promise<number> {
  if (cancelOl) {
    throw new Error("Canceled");
  }
  if (n == 0) return 1;

  if (m == 0) return 0;

  if (a[m - 1] == b[n - 1])
    return (await count(a, b, m - 1, n - 1)) + (await count(a, b, m - 1, n));
  else return count(a, b, m - 1, n);
}

Algoritmo |ç1CountOccurrencesDP|ç1 (mainstring, substring, m, n)
    variável lookup = matriz de inteiro com dimensões [m+1][n+1]
 
    para i de 1 até m
        lookup[0][i] = 0
 
    para j de 1 até n
        lookup[i][0] = 1
    
    para i de 1 até m 
        para j de 1 até n 
            se mainstring[i - 1] == [j - 1] 
                lookup[i][j] =  lookup[i - 1][j - 1] + 
                                lookup[i - 1][j]

            caso contrario 
                lookup[i][j] = lookup[i - 1][j]
                
  
    retorna lookup[m][n]